#!/bin/bash
exclude_loci_file=""
min_condprob=0.65
min_prob=0.2
topn_cmpreads=100
nthread=1
dforest_r=25
min_read_len=1000
seed=18473
isfast=1
mincvg=15
minbf=10

while getopts ":hc:p:x:q:r:n:l:s:f:d:b:" opt; do
        case ${opt} in
                h )
                        echo "igda_pipe_detect_ont -s seed -n nthread -l min_readlen -r minimal_nreads_in_rsm -c min_condprob -p min_prob -q topn_cmpreads -x exclude_loci_file -f isfast infile(bam or sam file) reffile contextmodel outdir"
                        echo "default:"
                        echo -e "\t-x (empty)"
			echo -e "\t-c 0.65"
			echo -e "\t-p 0.2"
			echo -e "\t-q 100"
			echo -e "\t-r 25"
			echo -e "\t-n 1"
			echo -e "\t-l 1000"
			echo -e "\t-s 18473"
			echo -e "\t-f 1"
			exit 0;;
		c )
			min_condprob=$OPTARG;;
		p )
			min_prob=$OPTARG;;
                x )
                        exclude_loci_file=$OPTARG;;
		q )
			topn_cmpreads=$OPTARG;;
		r )
			dforest_r=$OPTARG;;
		n )
			nthread=$OPTARG;;
		l )
                        min_read_len=$OPTARG;;
		s )
                        seed=$OPTARG;;
		f )
                        isfast=$OPTARG;;
		d )
                        mincvg=$OPTARG;;
                b )
                        minbf=$OPTARG;;
                \? )
                        echo "Invalid option: $OPTARG" 1>&2;;
                : )
                        echo "Invalid option: $OPTARG requires an argument" 1>&2;;
        esac
done
shift $((OPTIND - 1))

if [ $# -ne 4 ] ; then
	echo "igda_pipe_detect_ont -s seed -n nthread -l min_readlen -r minimal_nreads_in_rsm -c min_condprob -p min_prob -q topn_cmpreads -x exclude_loci_file -f isfast infile(bam or sam file) reffile contextmodel outdir"
        echo "default:"
        echo -e "\t-x (empty)"
        echo -e "\t-c 0.65"
        echo -e "\t-p 0.2"
	echo -e "\t-q 100"
	echo -e "\t-r 25"
	echo -e "\t-n 1"
	echo -e "\t-l 1000"
	echo -e "\t-s 18473"
	echo -e "\t-f 1"
	exit 0
fi


infile=$1
reffile=$2
contextmodel=$3
outdir=$4

echo "infile = "$infile
echo "reffile = "$reffile
echo "contextmodel = "$contextmodel
echo "outdir = "$outdir
echo "exclude_loci_file = "$exclude_loci_file
echo "min_condprob = "$min_condprob
echo "min_prob = "$min_prob
echo "topn_cmpreads = "$topn_cmpreads
echo "dforest_r = "$dforest_r
echo "nthread = "$nthread
echo "min_read_len = "$min_read_len
echo "seed = "$seed
echo "isfast = "$isfast
echo "mincvg = "$mincvg
echo "minbf = "$minbf
echo "Start."
mkdir -p $outdir

echo "============= samtom5 ==========="
igda samtom5 -l $min_read_len $infile $reffile $outdir/realign.m5

echo "============= pileup ==========="
igda contexteffect $outdir/realign.m5 $outdir/realign
mv $outdir/realign.context  $outdir/realign.context.withN
grep -v [NRYSWKMBDHV] $outdir/realign.context.withN > $outdir/realign.context


echo "============= predict context effect ==========="
igda_context_pred $contextmodel $outdir/realign.context $outdir/contexteffect
contextfile=$outdir/contexteffect/predition.txt


echo "============= encode ==========="
igda encode -t $outdir/realign.m5 $outdir/realign.encode

echo "============= cmpreads ==========="
igda cmpreads -n $nthread -l 0.5 -p $topn_cmpreads $outdir/realign.encode $outdir/realign.m5 $outdir/realign.cmpreads

echo "============= rsm ==========="
echo "dforest_r=$dforest_r"
if [ $isfast -eq 0 ]; then
	igda dforest -n $nthread -d 10000 -r $dforest_r $outdir/realign.encode $outdir/realign.m5 $outdir/realign.cmpreads $reffile $outdir/realign.dforest $outdir/tmp
else
	igda dforest -n $nthread -d 10000 -r $dforest_r -q $min_condprob $outdir/realign.encode $outdir/realign.m5 $outdir/realign.cmpreads $reffile $outdir/realign.dforest $outdir/tmp
fi
echo "=========== permutation ============="
if [ $seed -ne 0 ]; then
	igda permute -s $seed $outdir/realign.m5 $outdir/realign.pileup $outdir/realign.encode.permuted
	igda cmpreads -n $nthread -l 0.5 -p $topn_cmpreads $outdir/realign.encode.permuted $outdir/realign.m5 $outdir/realign.cmpreads.permuted
	igda dforest -n $nthread -d 10000 -r $dforest_r $outdir/realign.encode.permuted $outdir/realign.m5 $outdir/realign.cmpreads.permuted $reffile $outdir/realign.dforest.permuted $outdir/tmp_permuted

	cur_min_condprob=$(igda get_condprob_threshold $outdir/realign.dforest.permuted $outdir/realign.pileup)
	is_use=$(awk -v cur_min_condprob=$cur_min_condprob -v min_condprob=$min_condprob 'BEGIN{if (cur_min_condprob >=min_condprob){print 1}else{print 0}}')

	echo "cur_min_condprob = $cur_min_condprob"
	echo "cur_min_condprob = $cur_min_condprob" > $outdir/permuted_min_condprob.txt
else
	is_use=0;
fi
if [ $is_use -eq 1 ]; then
	igda filter -f $cur_min_condprob $outdir/realign.dforest $outdir/realign.dforest.ft
else
	igda filter -f $min_condprob $outdir/realign.dforest $outdir/realign.dforest.ft
fi


echo "============= detect orphan variants ==========="
igda detectsingle -c $mincvg -f 0 -b 0 $outdir/realign.pileup $contextfile $outdir/realign.detectsingle.raw
igda detectsingle -c $mincvg -f $min_prob -b $minbf $outdir/realign.pileup $contextfile $outdir/realign.detectsingle

echo "============= combine rsm and orphan variants ==========="
cat $outdir/realign.dforest.ft $outdir/realign.detectsingle | sort -s -u -k1,1n > $outdir/realign_raw.detected

if test "$exclude_loci_file" == "" ; then
	cp $outdir/realign_raw.detected $outdir/realign.detected
else
	exclude_loci_by_code $exclude_loci_file $outdir/realign_raw.detected $outdir/realign.detected
fi 

igda getvar -c 0 $outdir/realign.detected $outdir/realign.var

#igda_var2vcf $outdir/realign.var $reffile $outdir/realign.vcf
igda var2vcf $outdir/realign.var $reffile $outdir/realign.vcf

echo "Done."


