#!/bin/bash
exclude_loci_file=""
min_condprob=0.65
min_prob=0.1
topn_cmpreads=100
nthread=1
dforest_r=25
min_read_len=1000
seed=0
method="pb"
igda_cmd="igda_pipe_detect_pb"
isfast=1
segsize=20000
mincvg=15
minbf=10
auto_par=1

#while getopts ":hc:p:x:q:r:n:l:s:" opt; do
while getopts ":hn:m:f:g:l:r:c:p:q:x:s:d:b:a:" opt; do
        case ${opt} in
                h )
			echo "Usage: igda_pipe_detect [options] infile(bam file) reffile contextmodel outdir"
			echo ""
			
			echo "Input:"
			echo -e "\tinfile should be sorted aligned bam file. This file should be obtained by igda_align_pb(igda_align_ont) and sam2bam."
			echo -e "\treffile is the reference fasta file."
			echo -e "\tcontextmodel is the pretrained model for context effect and can be obtained at https://github.com/zhixingfeng/igda_contextmodel."
			echo ""

			echo "Options:"
			echo -e "\t-n\tNumber of threads. [default = 1]"
			echo -e "\t-m\tMethod. \"pb\" for PacBio and \"ont\" for Oxford Nanopore. [default = \"pb\"]"
			echo -e "\t-f\tIs using the fast calculation algorithm. 1 = yes and 0 = no. [default = 1]"
			echo -e "\t-g\tSegment size(bp) to split each genome. [default = 20000]"
			echo -e "\t-l\tMinimal read length (shorter reads will be excluded). [default = 1000]"
			echo -e "\t-r\tMinimal depth for each SNV. [default = 25]"
			echo -e "\t-c\tMinimal maximal conditional substitution rate. [default = 0.65]"
			echo -e "\t-p\tMinimal substitution rate for orphan SNVs. [default = 0.1]"
			echo -e "\t-q\tNumber of most similar reads to construct subspaces. [default = 100]"
			echo -e "\t-x\tThe file that list the loci to be excluded."
			echo -e "\t-s\tSeed for permutation test (experimental). [default = 0, i.e. no permutation]"
			echo -e "\t-d\tMinimal depth for each orphan SNV. [default = 15]"
			echo -e "\t-b\tMinimal log-BF for each orphan SNV. [default = 10]"
            echo -e "\t-a\tIs auto select parameters, 1=yes, 0=no. [default = 1]"
			exit 0;;
		n )
			nthread=$OPTARG;;
		m )
			method=$OPTARG
			case $method in
				"pb" )
					echo "method = pb"
					min_prob=0.1
					igda_cmd="igda_pipe_detect_pb"
					;;
				"ont" )
					echo "method = ont"
					min_prob=0.2
					igda_cmd="igda_pipe_detect_ont"
					;;
				* )
					echo "method should be pb or ont."
					exit 1;;
			esac
			;;
		f )
			isfast=$OPTARG;;
		g )
                        segsize=$OPTARG;;
		l )
			min_read_len=$OPTARG;;
		r )
			dforest_r=$OPTARG;;
		c ) 
			min_condprob=$OPTARG;;
		p )
			min_prob=$OPTARG;;
		q ) 
			topn_cmpreads=$OPTARG;;
		x )
			exclude_loci_file=$OPTARG;;
		s ) 
			seed=$OPTARG;;
		d )
			mincvg=$OPTARG;;
		b )
			minbf=$OPTARG;;
        a )
            auto_par=$OPTARG;;
                \? )
                        echo "Invalid option: $OPTARG" 1>&2;;
                : )
                        echo "Invalid option: $OPTARG requires an argument" 1>&2;;
        esac
done
shift $((OPTIND - 1))

if [ $# -ne 4 ] ; then
	echo "Usage: igda_pipe_detect [options] infile(bam file) reffile contextmodel outdir"
	echo ""

	echo "Input:"
        echo -e "\tinfile should be sorted aligned bam file. This file should be obtained by igda_align_pb(igda_align_ont) and sam2bam."
        echo -e "\treffile is the reference fasta file."
        echo -e "\tcontextmodel is the pretrained model for context effect and can be obtained at https://github.com/zhixingfeng/igda_contextmodel."
	echo ""

        echo "Options:"
        echo -e "\t-n\tNumber of threads. [default = 1]"
        echo -e "\t-m\tMethod. \"pb\" for PacBio and \"ont\" for Oxford Nanopore. [default = \"pb\"]"
        echo -e "\t-f\tIs using the fast calculation algorithm. 1 = yes and 0 = no. [default = 1]"
        echo -e "\t-g\tSegment size(bp) to split each genome. [default = 20000]"
	echo -e "\t-l\tMinimal read length (shorter reads will be excluded). [default = 1000]"
        echo -e "\t-r\tMinimal depth for each SNV. [default = 25]"
        echo -e "\t-c\tMinimal maximal conditional substitution rate. [default = 0.65]"
        echo -e "\t-p\tMinimal substitution rate for orphan SNVs. [default = 0.1]"
        echo -e "\t-q\tNumber of most similar reads to construct subspaces. [default = 100]"
        echo -e "\t-x\tThe file that list the loci to be excluded."
        echo -e "\t-s\tSeed for permutation test (experimental). [default = 0, i.e. no permutation]"
	echo -e "\t-d\tMinimal depth for each orphan SNV. [default = 15]"
        echo -e "\t-b\tMinimal log-BF for each orphan SNV. [default = 10]"
        echo -e "\t-a\tIs auto select parameters, 1=yes, 0=no. [default = 1]"
	exit 0
fi


infile=$1
reffile=$2
contextmodel=$3
outdir=$4

# check existence of outdir
if [ -d "$outdir" ];then
        echo "$outdir already exists."
        exit 1
fi

echo "infile = "$infile
echo "reffile = "$reffile
echo "contextmodel = "$contextmodel
echo "outdir = "$outdir

echo "nthread = "$nthread
echo "method = "$method
echo "isfast = "$isfast
echo "segsize = "$segsize
echo "min_read_len = "$min_read_len
echo "dforest_r = "$dforest_r
echo "min_condprob = "$min_condprob
echo "min_prob = "$min_prob
echo "topn_cmpreads = "$topn_cmpreads
echo "exclude_loci_file = "$exclude_loci_file
echo "seed = "$seed
echo "mincvg = "$mincvg
echo "minbf = "$minbf
echo "auto_par = "$auto_par
echo "Start."
mkdir -p $outdir

# get range of each chromosome with aligned reads
echo "getbamchrrange"
igda getbamchrrange $infile $reffile $outdir/chrrange.txt

# initialize the final vcf file
echo "##fileformat=VCFv4.2" > $outdir/detected_snv.vcf
echo "##fileDate=$(date)" >> $outdir/detected_snv.vcf
echo "##source=igda" >> $outdir/detected_snv.vcf
echo "##reference=$reffile" >> $outdir/detected_snv.vcf
echo -e "#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO" >> $outdir/detected_snv.vcf

# split data and detect SNVs
rm -rf $outdir/detected_snv.var
echo "split bam file and detect SNVs"
while IFS=$'\t' read -r chr rStart rEnd; do
	mkdir -p $outdir/dat_split/$chr
	mkdir -p $outdir/detect_split/$chr
	mkdir -p $outdir/detected_snv/$chr
	mkdir -p $outdir/ref
	cur_reffile=$outdir/ref/$chr.fasta
	getchr $reffile $chr > $cur_reffile

	# get m5 for each chromosome
	curref_samfile=$outdir/detected_snv/$chr/original.sam
	curref_bamfile=$outdir/detected_snv/$chr/original.bam
	curref_m5file=$outdir/detected_snv/$chr/original.m5
	curref_encodefile=$outdir/detected_snv/$chr/original.encode
	
	#getreadsbyref $infile $chr $curref_samfile
	getreadsbyref_bam $infile $chr $curref_samfile $nthread
	samtools view -h -@ $nthread -b -o $curref_bamfile $curref_samfile
	samtools index $curref_bamfile
	igda samtom5 -l $min_read_len $curref_samfile $cur_reffile $curref_m5file
	igda encode -t $curref_m5file $curref_encodefile
	
	#rm $outdir/detected_snv/$chr/original.sam
	rm $curref_samfile
	pushd $outdir/detected_snv/$chr/
		ln -s original.m5 realign.m5
		ln -s original.encode realign.encode
		ln -s detected_snv.var realign.var
		ln -s detected_snv.vcf realign.vcf
	popd
	# split and detect	
	split_range $rStart $rEnd $segsize | 
	while IFS=$'\t' read -r cur_start cur_end; do
		# get range (1-based for sam file)
		cur_samfile=$outdir/dat_split/$chr/${chr}_$(($cur_start+1))_$(($cur_end+1)).sam
		cur_region=${chr}":"$(($cur_start+1))"-"$(($cur_end+1))
		echo -e "$cur_region (1-based)"
		
		# split data
		#samtools view -h -o $cur_samfile -@ $nthread $infile $cur_region
		samtools view -h -o $cur_samfile -@ $nthread $curref_bamfile $cur_region

		# detect SNVs
		cur_out_dir=$outdir/detect_split/$chr/${chr}_${cur_start}_${cur_end}
		if [[ $exclude_loci_file == "" ]]; then
			cur_cmd="$igda_cmd -n $nthread -f $isfast -l $min_read_len -r $dforest_r -c $min_condprob -p $min_prob -q $topn_cmpreads -s $seed -d $mincvg -b $minbf -a $auto_par"
		else
			cur_cmd="$igda_cmd -n $nthread -f $isfast -l $min_read_len -r $dforest_r -c $min_condprob -p $min_prob -q $topn_cmpreads -x $exclude_loci_file -s $seed -d $mincvg -b $minbf -a $auto_par"
		fi
		cur_cmd=$cur_cmd" $cur_samfile $cur_reffile $contextmodel $cur_out_dir"
		echo $cur_cmd;$cur_cmd
		echo -e ${chr}"\t"${cur_start}"\t"${cur_end} > $cur_out_dir/chrrange.txt

		# filter detected SNVs by excluding SNVs out of range
		awk -v cur_start=$cur_start -v cur_end=$cur_end '{
			if ($1>=cur_start && $1<=cur_end){
				print $0
			}
		}' $cur_out_dir/realign.var > $cur_out_dir/realign.var.inrange
		cat $cur_out_dir/realign.var.inrange >> $outdir/detected_snv/$chr/detected_snv.var
		
		# remove cur_samfile
		rm $cur_samfile
	
		# remove intermediate results
		rm $cur_out_dir/realign.cmpreads* $cur_out_dir/realign.context*
		rm $cur_out_dir/realign.detected $cur_out_dir/realign.encode
		rm $cur_out_dir/realign.m5 $cur_out_dir/realign_raw.detected
	done

	# get vcf file for each chromosome
	#igda_var2vcf $outdir/detected_snv/$chr/detected_snv.var $cur_reffile $outdir/detected_snv/$chr/detected_snv.vcf
	igda var2vcf $outdir/detected_snv/$chr/detected_snv.var $cur_reffile $outdir/detected_snv/$chr/detected_snv.vcf
	# add the current vcf file to the final chromosome
	grep -v '^#' $outdir/detected_snv/$chr/detected_snv.vcf >> $outdir/detected_snv.vcf

	# remove curref_bamfile
	rm $curref_bamfile $curref_bamfile.bai
done < $outdir/chrrange.txt


