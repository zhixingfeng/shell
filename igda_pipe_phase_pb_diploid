#!/bin/bash
min_cvg=10
min_nn=25
max_nn=50
min_jaccard=2.0
max_iter=1
nthread=1
while getopts ":hc:t:m:j:b:n:" opt; do
        case ${opt} in
                h )
                        echo "igda_pipe_phase_pb -n nthread -b niter -c min_cvg -t min_nn -m max_nn indir reffile outdir"
                        echo "default:"
                        echo -e "\t-c 10, minimal coverage of each contig"
                        echo -e "\t-t 25, minimal number of nearest neighbors"
                        echo -e "\t-m 50, maximal number of nearest neighbors"
			echo -e "\t-j 2.0, minimal jaccard index for find_nccontigs and tred"
			echo -e "\t-b maximal number of iteration in ANN, default = 1"
			echo -e "\t-n number of threads, default = 1"
                        exit 0;;
                c )
                        min_cvg=$OPTARG;;
                t )
                        min_nn=$OPTARG;;
                m )
                        max_nn=$OPTARG;;
		j )
			min_jaccard=$OPTARG;;
		b )
			max_iter=$OPTARG;;
		n )
                        nthread=$OPTARG;;
                \? )
                        echo "Invalid option: $OPTARG" 1>&2;;
                : )
                        echo "Invalid option: $OPTARG requires an argument" 1>&2;;
        esac
done
shift $((OPTIND - 1))

if [ $# -ne 3 ] ; then
	echo "igda_pipe_phase_pb -n nthread -b niter -c mincvg -t min_nn -m max_nn indir reffile outdir"
        echo "default:"
        echo -e "\t-c 10, minimal coverage of each contig"
        echo -e "\t-t 25, minimal number of nearest neighbors"
        echo -e "\t-m 50, maximal number of nearest neighbors "
	echo -e "\t-j 2.0, minimal jaccard index for find_nccontigs and tred"
	echo -e "\t-b maximal number of iteration in ANN, default = 1"
	echo -e "\t-n number of threads, default = 1"
	exit 0
fi


indir=$1
reffile=$2
outdir=$3

mkdir -p $outdir
echo "indir = "$indir
echo "reffile = "$reffile
echo "outdir = "$outdir
echo "min_cvg = "$min_cvg
echo "min_nn = "$min_nn
echo "max_nn = "$max_nn
echo "min_jaccard = "$min_jaccard
echo "max_iter = "$max_iter
echo "nthread = "$nthread
echo "Start."

echo "============= dimension reduction ==========="
igda rdim $indir/realign.encode $indir/realign.var $outdir/realign.encode.rdim

echo "============= recode ==========="
igda recode -t $nthread $indir/realign.m5 $indir/realign.var $outdir/realign.recode

echo "============= ann ==========="
ann_c=$min_cvg
ann_t=$min_nn
ann_m=$max_nn
echo "ann_t=$ann_t, ann_m=$ann_m, ann_c=$ann_c"
igda ann -n $nthread -b $max_iter -j 0.5 -c $ann_c -t $ann_t -m $ann_m  $outdir/realign.recode $outdir/realign.encode.rdim $indir/realign.m5 $indir/realign.var $reffile $outdir/realign.ann

echo "============= test contigs ==========="
#igda test_contigs -a 1.332824 -t 89.04769 $outdir/realign.ann $outdir/realign.recode $indir/realign.m5 $reffile
igda test_contigs -b 10 -a 1.332824 -t 89.04769 $outdir/realign.ann $outdir/realign.recode $indir/realign.m5 $reffile

echo "============= calculate abundance ==========="
igda abundance $outdir/realign.ann.tested.ft $outdir/realign.recode $indir/realign.m5

echo "============= test contigs pairwisely ==========="
#igda test_contigs_pairwise -a 1.332824 -t 89.04769 $outdir/realign.ann.tested.ft.count $outdir/realign.recode $reffile
igda test_contigs_pairwise -b 10 -a 1.332824 -t 89.04769 $outdir/realign.ann.tested.ft.count $outdir/realign.recode $reffile

echo "============= correct contigs ==========="
mv $outdir/realign.ann.tested.ft.count.ft $outdir/realign.ann.tested.ft.count.ft.raw
igda correct_contigs -l 0.75 $outdir/realign.ann.tested.ft.count.ft.raw $outdir/realign.ann.tested.ft.count.ft.ct
sort -k2,2n -k3,3n -k1,1 -u $outdir/realign.ann.tested.ft.count.ft.ct > $outdir/realign.ann.tested.ft.count.ft

echo "============= polish ==========="
mv $outdir/realign.ann.tested.ft.count.ft $outdir/realign.ann.tested.ft.count.ft.unpolished
igda polish -v $indir/realign.var -f 0.2 $outdir/realign.ann.tested.ft.count.ft.unpolished $outdir/realign.encode.rdim $indir/realign.m5 $reffile $outdir/realign.ann.tested.ft.count.ft.tmp $outdir/tmp_polish
sort -k2,2n -k3,3n -k1,1 -u $outdir/realign.ann.tested.ft.count.ft.tmp > $outdir/realign.ann.tested.ft.count.ft
#rm $outdir/realign.ann.tested.ft.count.ft.tmp

echo "============= transitive reduction ==========="
mv $outdir/realign.ann.tested.ft.count.ft $outdir/realign.ann.tested.ft.count.ft.tmp
igda find_nccontigs -j $min_jaccard $outdir/realign.ann.tested.ft.count.ft.tmp $outdir/realign.ann.tested.ft.count.ft
#igda tred -r -j $min_jaccard $outdir/realign.ann.tested.ft.count.ft
#igda tred -l 0.2 -p 0.2 -r -j $min_jaccard $outdir/realign.ann.tested.ft.count.ft
igda tred -l 0 -p 0 -r -j $min_jaccard $outdir/realign.ann.tested.ft.count.ft

echo "============= assemble ==========="
igda assemble $outdir/realign.ann.tested.ft.count.ft $outdir/realign.ann.tested.ft.count.ft.tred.dot

echo "============= recalculate abundance ==========="
igda abundance $outdir/realign.ann.tested.ft.count.ft.assembled $outdir/realign.recode $indir/realign.m5

echo "============= filter assembled contigs ============"
igda find_nccontigs -j $min_jaccard $outdir/realign.ann.tested.ft.count.ft.assembled.count $outdir/realign.ann.tested.ft.count.ft.assembled.count.nc
igda test_contigs_pairwise $outdir/realign.ann.tested.ft.count.ft.assembled.count.nc  $outdir/realign.recode $reffile

#igda_phase2vcf $outdir/realign.ann.tested.ft.count.ft.assembled.count.nc.ft $indir/realign.vcf $outdir/realign.ann.tested.ft.count.ft.assembled.count.nc.ft.vcf igda

igda_ann2sam $outdir/realign.ann.tested.ft.count.ft.assembled.count.nc.ft $reffile $outdir/realign.ann.tested.ft.count.ft.assembled.count.nc.ft.sam

echo "Done."


