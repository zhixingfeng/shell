#!/usr/bin/env Rscript
args = commandArgs(trailingOnly=TRUE)

load.annfile <- function(annfile)
{
        x.raw <- read.table(annfile, header = FALSE, as.is = TRUE, sep = '\t')
        if (ncol(x.raw) == 12 || ncol(x.raw) == 13){
                cons.seq <- lapply(strsplit(as.character(x.raw[,1]),','), function(y) if (y[1]==-1) {integer(0)} else {as.integer(y)})
                cons.seed <- lapply(strsplit(as.character(x.raw[,10]),','), function(y) if (y[1]==-1) {integer(0)} else {as.integer(y)})
                cons.neighbor_id <- lapply(strsplit(as.character(x.raw[,11]),','), function(y) if (y[1]==-1) {integer(0)} else {as.integer(y)})
                cons.tested_loci <- lapply(strsplit(as.character(x.raw[,12]),','), function(y) if (y[1]==-1) {integer(0)} else {as.integer(y)})

                if (ncol(x.raw) == 13){
                        x.raw[,13] <- as.character(x.raw[,13])
                        cons.nn_reads_id <- lapply(strsplit(x.raw[,13],','), function(y) if (y[1]==-1) {integer(0)} else {as.integer(y)})
                        x <- data.frame(cbind(cons.seq, x.raw[,2], x.raw[,3], x.raw[,4], x.raw[,5], x.raw[,6], x.raw[,7], x.raw[,8], x.raw[,9],
                                cons.seed, cons.neighbor_id, cons.tested_loci, cons.nn_reads_id), stringsAsFactors = FALSE)
                        names(x) <- c('cons_seq', 'start', 'end', 'contig_count', 'contig_cvg', 'log_bf_null', 'log_bf_ind', 'min_rr_null', 'min_rr_ind',
                                 'seed', 'neighbor_id', 'tested_loci', 'nn_reads_id')
                }else{
                        x <- data.frame(cbind(cons.seq, x.raw[,2], x.raw[,3], x.raw[,4], x.raw[,5], x.raw[,6], x.raw[,7], x.raw[,8], x.raw[,9],
                                cons.seed, cons.neighbor_id, cons.tested_loci), stringsAsFactors = FALSE)
                        names(x) <- c('cons_seq', 'start', 'end', 'contig_count', 'contig_cvg', 'log_bf_null', 'log_bf_ind', 'min_rr_null', 'min_rr_ind',
                                 'seed', 'neighbor_id', 'tested_loci')
                }

                x$start <- as.integer(x$start)
                x$end <- as.integer(x$end)
                x$contig_count <- as.numeric(x$contig_count)
                x$contig_cvg <- as.numeric(x$contig_cvg)
                x$log_bf_null <- as.numeric(x$log_bf_null)
                x$log_bf_ind <- as.numeric(x$log_bf_ind)
                x$min_rr_null <- as.numeric(x$min_rr_null)
                x$min_rr_ind <- as.numeric(x$min_rr_ind)
        }

        if (ncol(x.raw) == 6){
                cons.seq <- lapply(strsplit(x.raw[,1],','), as.integer)
                cons.seed <- lapply(strsplit(x.raw[,4],','), as.integer)
                cons.neighbor_id <- lapply(strsplit(x.raw[,5],','), as.integer)
                cons.tested_loci <- lapply(strsplit(x.raw[,6],','), as.integer)
                x <- data.frame(cbind(cons.seq, x.raw[,2], x.raw[,3], cons.seed, cons.neighbor_id, cons.tested_loci), stringsAsFactors = FALSE)
                names(x) <- c('cons_seq', 'start', 'end', 'seed', 'neighbor_id', 'tested_loci')
                x$start <- as.integer(x$start)
                x$end <- as.integer(x$end)
        }
	if (ncol(x.raw) == 3){
                cons.seq <- lapply(strsplit(x.raw[,1],','), as.integer)
                x <- data.frame(cbind(cons.seq, x.raw[,2], x.raw[,3]), stringsAsFactors = FALSE)
                names(x) <- c('cons_seq', 'start', 'end')
                x$start <- as.integer(x$start)
                x$end <- as.integer(x$end)
        }
        return(x)

}
save.annfile <- function(ann.data, outfile)
{
        ann.data.out <- ann.data
        ann.data.out$cons_seq <- sapply(ann.data$cons_seq, paste, collapse=',')
        ann.data.out$seed <- sapply(ann.data$seed, paste, collapse=',')
        ann.data.out$neighbor_id <- sapply(ann.data$neighbor_id, paste, collapse=',')
        ann.data.out$tested_loci <- sapply(ann.data$tested_loci, paste, collapse=',')
        ann.data.out$nn_reads_id <- sapply(ann.data$nn_reads_id, paste, collapse=',')
        write.table(ann.data.out, file = outfile, col.names=FALSE, row.names=FALSE, quote=FALSE, sep = '\t')
}

load.encodefile <- function(encodefile)
{
        x.raw <- readLines(encodefile)
        lapply(strsplit(x.raw,'\t'), as.integer )
}


pileup_var_count <- function(encode.data)
{
        max.encode <- max(unlist(encode.data))
        var.count <- rep(0,max.encode)
        for (i in 1:length(encode.data)){
                var.count[encode.data[[i]]]  <- var.count[encode.data[[i]]] + 1
        }
        var.count
}

pileup_var_count_recode <- function(recode.data, recode.ref.data, var.data)
{
        pu_var <- rep(0, 4*max(var.data$locus)+3)
        pu_var_ref <- rep(0, 4*max(var.data$locus)+3)

        pu_var[1:max(unlist(recode.data))] <- pileup_var_count(recode.data)
        pu_var_ref[1:max(unlist(recode.ref.data))] <- pileup_var_count(recode.ref.data)

        cvg <- pu_var[4*var.data$locus] + pu_var[4*var.data$locus + 1] + pu_var[4*var.data$locus + 2] + pu_var[4*var.data$locus + 3]
        cvg <- cvg + pu_var_ref[4*var.data$locus] + pu_var_ref[4*var.data$locus + 1] + pu_var_ref[4*var.data$locus + 2] + pu_var_ref[4*var.data$locus + 3]

        prop.A <- pu_var[4*var.data$locus] / cvg
        prop.C <- pu_var[4*var.data$locus + 1] / cvg
        prop.G <- pu_var[4*var.data$locus + 2] / cvg
        prop.T <- pu_var[4*var.data$locus + 3] / cvg

        rl <- data.frame(cbind(var.data$locus, prop.A, prop.C, prop.G, prop.T,
                        pu_var[4*var.data$locus], pu_var[4*var.data$locus+1], pu_var[4*var.data$locus+2],
                        pu_var[4*var.data$locus+3], cvg), stringsAsFactors=FALSE)

        names(rl) <- c('locus', 'prop_A', 'prop_C', 'prop_G', 'prop_T', 'count_A', 'count_C', 'count_G', 'count_T', 'cvg')
        rl
}

get_consensus_recode <- function(cur.recode.data, cur.recode.ref.data, min.cvg = 10)
{
        cur.var.data <- list()
        cur.var.data$locus <- sort(unique( floor(unlist(c(cur.recode.data, cur.recode.ref.data)) / 4) ))

        pu <- pileup_var_count_recode(cur.recode.data, cur.recode.ref.data, cur.var.data)

        cur.shift <- apply(pu, 1, function(x, t)  if (x[10]>t & any(x[2:5]>=0.80)){4*x[1] + which(x[2:5]>=0.80) - 1 } , t = min.cvg)

        sort(unlist(cur.shift))
}

get_consensus_recode_recap <- function(ann.data, recode.data, recode.ref.data, min.cvg = 10)
{
        all_loci <- sort(unique( floor(unlist(c(recode.data, recode.ref.data)) / 4) ))
        cons.recap <- ann.data
        cons_seq <- list()
        tested_loci <- list()
        for (i in 1:nrow(ann.data)){
                cur.recode.data <- recode.data[ann.data$neighbor_id[[i]] + 1]
                cur.recode.ref.data <- recode.ref.data[ann.data$neighbor_id[[i]] + 1]
                cur.cons <- get_consensus_recode(cur.recode.data, cur.recode.ref.data, min.cvg)
                cur.loci <- floor(cur.cons / 4)

                cons_seq[[i]] <- cur.cons[cur.loci >= ann.data$start[i] & cur.loci <= ann.data$end[i]]
                tested_loci[[i]] <- all_loci[all_loci >= ann.data$start[i] & all_loci <= ann.data$end[i]]
        }
        cons.recap$cons_seq <- cons_seq
        cons.recap$tested_loci <- tested_loci
        cons.recap
}

if (length(args) != 3 & length(args) != 4){
	print("get_consensus_recode ann_file recode_file outfile mincvg(default=10)")
	print("get_consensus_recode ann_file recode_file outfile")
	stop()
}else{
	ann_file <- args[1]
	recode_file <- args[2]
	outfile <- args[3]
	mincvg <- 10
	cat("ann_file = ", ann_file, "\n")
	cat("recode_file = ", recode_file, "\n")
	cat("out_file = ", outfile, "\n")

	if (length(args) == 4){
		mincvg <- args[4]
	}
	recode_ref_file <- paste(recode_file, ".ref", sep="")
	
	ann.data <- load.annfile(ann_file)
	recode.data <- load.encodefile(recode_file)
	recode.ref.data <- load.encodefile(recode_ref_file)
	
	cons.recap <- get_consensus_recode_recap(ann.data, recode.data, recode.ref.data, mincvg)	
	save.annfile(cons.recap, outfile)	
}





